import 'package:flutter/material.dart';
import '../services/auth_service.dart';
import '../models/app_user.dart';
import 'outlet_screen.dart';
import 'admin_delivered_invoices_screen.dart';
import 'sales_rep_screen.dart';
import 'warehouse_screen.dart';
import 'package:excel/excel.dart' as excel;
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/services.dart';
import '../services/firebase_service.dart';
import '../models/product.dart';
import '../services/cash_register_service.dart';
import '../services/invoice_service.dart';
import '../models/invoice.dart';
import 'analytics_screen.dart';
import 'profile_screen.dart';
import '../services/purchase_service.dart';
import '../services/shortage_service.dart';
import '../models/purchase.dart';
import '../models/shortage.dart';

// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–∫–∞

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  AppUser? _user;
  bool _loading = true;
  int _selectedIndex = 0; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è bottom navigation
  double _totalCashAmount = 0.0;
  final CashRegisterService _cashRegisterService = CashRegisterService();
  final InvoiceService _invoiceService = InvoiceService();
  final PurchaseService _purchaseService = PurchaseService();
  final ShortageService _shortageService = ShortageService();

  // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π
  int _countReview = 0;
  int _countPacking = 0;
  int _countDelivery = 0;
  int _countDelivered = 0;
  int _countPayment = 0;
  int _activeProcurementsCount = 0;

  List<Widget> get _tabBodies => [
    _InvoicesTab(user: _user),
    OutletScreen(),
    SalesRepScreen(),
    WarehouseScreen(),
    AnalyticsScreen(),
  ];

  @override
  void initState() {
    super.initState();
    _loadUser();
    _loadCashAmount();
    _loadInvoiceCounters();
    _loadActiveProcurementsCount();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∫–∞—Å—Å—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    if (_user?.role == 'admin' || _user?.role == 'superadmin') {
      _loadCashAmount();
    }
  }

  Future<void> _loadUser() async {
    final user = await AuthService().getCurrentUser();
    if (mounted) {
      setState(() {
        _user = user;
        _loading = false;
      });
      print('[HomeScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: email=${user?.email}, role=${user?.role}');
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–º–º—É –∫–∞—Å—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user?.role == 'admin' || user?.role == 'superadmin') {
        print('[HomeScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user?.role}, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Å—É');
        _loadCashAmount();
      } else {
        print('[HomeScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω, –∫–∞—Å—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
      }
    }
  }

  Future<void> _loadCashAmount() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–º–º—É –∫–∞—Å—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    if (_user?.role != 'admin' && _user?.role != 'superadmin') {
      print('[HomeScreen] –ö–∞—Å—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = ${_user?.role}');
      return;
    }
    
    print('[HomeScreen] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Å—É –¥–ª—è ${_user?.role}');
    try {
      final amount = await _cashRegisterService.getTotalCashAmount();
      if (mounted) {
        setState(() {
          _totalCashAmount = amount;
        });
        print('[HomeScreen] –ö–∞—Å—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${_totalCashAmount.toStringAsFixed(2)} ‚Ç∏');
      }
    } catch (e) {
      print('[HomeScreen] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–º–º—ã –∫–∞—Å—Å—ã: $e');
    }
  }

  Future<void> _loadInvoiceCounters() async {
    try {
      final results = await Future.wait<int>([
        _invoiceService.getInvoiceCountByStatus(InvoiceStatus.review),
        _invoiceService.getInvoiceCountByStatus(InvoiceStatus.packing),
        _invoiceService.getInvoiceCountByStatus(InvoiceStatus.delivery),
        _invoiceService.getInvoiceCountByStatus(InvoiceStatus.delivered),
        _invoiceService.getInvoiceCountByStatus(InvoiceStatus.paymentChecked),
      ]);
      if (!mounted) return;
      setState(() {
        _countReview = results[0];
        _countPacking = results[1];
        _countDelivery = results[2];
        _countDelivered = results[3];
        _countPayment = results[4];
      });
    } catch (e) {
      // –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –±–µ–π–¥–∂–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    }
  }

  Future<void> _loadActiveProcurementsCount() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫—É–ø—ã
      final purchases = await _purchaseService.getAllPurchases();
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫—É–ø—ã (–Ω–µ –≤ –∞—Ä—Ö–∏–≤–µ)
      final activePurchases = purchases.where((p) => 
        p.status != PurchaseStatus.completed && 
        p.status != PurchaseStatus.closedWithShortage
      ).length;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—á–∏
      final shortages = await _shortageService.getAllShortages();
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—á–∏ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
      final activeShortages = shortages.where((s) => 
        s.status != ShortageStatus.completed
      ).length;
      
      if (mounted) {
        setState(() {
          _activeProcurementsCount = activePurchases + activeShortages;
        });
      }
    } catch (e) {
      print('[HomeScreen] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫—É–ø–æ–≤: $e');
    }
  }

  Widget _buildAdminInvoicesTab(BuildContext context) {
    final isAdmin = _user?.role == 'admin' || _user?.role == 'superadmin';
    final sections = [
      if (isAdmin) ...[
        {'emoji': 'üç¶', 'label': '–í—Ö–æ–¥—è—â–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ', 'route': '/admin_incoming_invoices', 'count': _countReview},
        {'emoji': 'üî®', 'label': '–ù–∞ —Å–±–æ—Ä–∫–µ', 'route': '/admin_packing_invoices', 'count': _countPacking},
        {'emoji': 'üöö', 'label': '–ü–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É', 'route': '/admin_delivery_invoices', 'count': _countDelivery},
        {'emoji': '‚úÖ', 'label': '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç', 'route': '/admin_delivered_invoices', 'count': _countDelivered},
        {'emoji': '‚úîÔ∏è', 'label': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç', 'route': '/admin_payment_check_invoices', 'count': _countPayment},
        {'emoji': 'üì¶', 'label': '–ê—Ä—Ö–∏–≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö', 'route': '/invoice_list'},
        if (_user?.role == 'admin' || _user?.role == 'superadmin')
          {'emoji': 'üí∞', 'label': '–ö–∞—Å—Å–∞', 'route': '/cash_register'},
        if (_user?.role == 'admin' || _user?.role == 'superadmin')
          {'emoji': 'üí∏', 'label': '–†–∞—Å—Ö–æ–¥—ã', 'route': '/cash_expenses'},
        {'emoji': 'üõçÔ∏è', 'label': '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫—É–ø—ã', 'route': '/active_procurements', 'count': _activeProcurementsCount},
        {'emoji': 'üìö', 'label': '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', 'route': '/products', 'count': _activeProcurementsCount > 0 ? _activeProcurementsCount : null},
        {'emoji': 'üìä', 'label': '–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö', 'route': '/sales_analysis'},
      ]
    ];
    return Column(
      children: [
        Expanded(
          child: Stack(
            children: [
              ListView.builder(
                padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
                itemCount: sections.length,
                itemBuilder: (context, i) {
                  final s = sections[i];
                  return Card(
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    elevation: 2,
                    margin: const EdgeInsets.only(bottom: 16),
                    child: ListTile(
                      leading: Text(s['emoji'] as String, style: const TextStyle(fontSize: 28)),
                      title: Text(s['label'] as String, style: const TextStyle(fontWeight: FontWeight.w500)),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          if ((s['count'] as int?) != null && (s['count'] as int) > 0)
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: Colors.redAccent,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Text(
                                (s['count'] as int).toString(),
                                style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                              ),
                            ),
                          const SizedBox(width: 8),
                          const Icon(Icons.chevron_right),
                        ],
                      ),
                      onTap: () {
                        Navigator.pushNamed(context, s['route'] as String).then((_) {
                          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞ –∫–∞—Å—Å—ã
                          if (s['route'] == '/cash_register' && (_user?.role == 'admin' || _user?.role == 'superadmin')) {
                            _loadCashAmount();
                          }
                          // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
                          _loadInvoiceCounters();
                          _loadActiveProcurementsCount();
                        });
                      },
                    ),
                  );
                },
              ),
              Positioned(
                bottom: 32,
                right: 16,
                child: FloatingActionButton(
                  backgroundColor: const Color(0xFF7B61FF),
                  onPressed: () {
                    Navigator.pushNamed(context, '/create_invoice');
                  },
                  child: const Icon(Icons.add, color: Colors.white),
                  tooltip: '–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é',
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥ _showParseDialog –ø–æ–ª–Ω–æ—Å—Ç—å—é

  @override
  Widget build(BuildContext context) {
    print('[HomeScreen] build: _user.email=${_user?.email}, _user.role=${_user?.role}');
    print('[HomeScreen] build: _totalCashAmount=${_totalCashAmount.toStringAsFixed(2)} ‚Ç∏');
    print('[HomeScreen] build: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Å—Å—É = ${_user?.role == 'admin' || _user?.role == 'superadmin'}');
    if (_loading) {
      return Scaffold(
        appBar: AppBar(title: const Text("–ó–∞–≥—Ä—É–∑–∫–∞...")),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    String appBarTitle;
    if (_user?.role == 'admin' || _user?.role == 'superadmin') {
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤
      appBarTitle = '–ú–æ–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ';
      if (_selectedIndex == 1) appBarTitle = '–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏';
      if (_selectedIndex == 2) appBarTitle = '–¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏';
      if (_selectedIndex == 3) appBarTitle = '–ö–∞—Ç–∞–ª–æ–≥–∏';
      if (_selectedIndex == 4) appBarTitle = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞';
    } else {
      // –î–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
      appBarTitle = '–ú–æ–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ';
      if (_selectedIndex == 1) appBarTitle = '–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏';
      if (_selectedIndex == 2) appBarTitle = '–¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏';
      if (_selectedIndex == 3) appBarTitle = '–ö–∞—Ç–∞–ª–æ–≥–∏';
      if (_selectedIndex == 4) appBarTitle = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞';
    }
    return Scaffold(
      backgroundColor: const Color(0xFFFCF8FF),
      appBar: AppBar(
        title: Text(
          appBarTitle,
          style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.white,
        elevation: 2,
        centerTitle: false,
        iconTheme: const IconThemeData(color: Colors.black),
        actions: [
          if ((_user?.role == 'admin' || _user?.role == 'superadmin') && _selectedIndex != 4)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.account_balance_wallet, color: Colors.green, size: 16),
                  const SizedBox(width: 4),
                  Text(
                    '–ö–∞—Å—Å–∞: ${_totalCashAmount.toStringAsFixed(2)} ‚Ç∏',
                    style: TextStyle(
                      color: Colors.green,
                      fontWeight: FontWeight.bold,
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(width: 8),
                  GestureDetector(
                    onTap: _loadCashAmount,
                    child: Icon(
                      Icons.refresh,
                      color: Colors.green,
                      size: 16,
                    ),
                  ),
                ],
              ),
            ),
          // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
          IconButton(
            icon: const Icon(Icons.person, color: Colors.black),
            onPressed: () async {
              final user = await AuthService().getCurrentUser();
              if (user == null) return;
              showModalBottomSheet(
                context: context,
                isScrollControlled: true,
                shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                ),
                builder: (_) => ProfileSettingsSheet(user: user),
              );
            },
            tooltip: '–ü—Ä–æ—Ñ–∏–ª—å',
          ),

          IconButton(
            icon: const Icon(Icons.logout, color: Colors.black),
            onPressed: () async {
              await AuthService().signOut();
              if (mounted) {
                Navigator.pushReplacementNamed(context, '/login');
              }
            },
            tooltip: '–í—ã–π—Ç–∏',
          ),
        ],
      ),
      body: _selectedIndex == 0
          ? _buildAdminInvoicesTab(context)
          : _tabBodies[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: (index) {
          setState(() {
            _selectedIndex = index;
          });
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
          if (index == 0 && (_user?.role == 'admin' || _user?.role == 'superadmin')) {
            _loadCashAmount();
          }
        },
        type: BottomNavigationBarType.fixed,
        items: [
          const BottomNavigationBarItem(
            icon: Icon(Icons.receipt_long),
            label: '–ù–∞–∫–ª–∞–¥–Ω—ã–µ',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.people),
            label: '–ö–ª–∏–µ–Ω—Ç—ã',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.people_alt),
            label: '–¢–æ—Ä–≥–æ–≤—ã–µ',
          ),
          BottomNavigationBarItem(
            icon: Stack(
              children: [
                const Icon(Icons.inventory_2),
                if (_activeProcurementsCount > 0)
                  Positioned(
                    right: 0,
                    top: 0,
                    child: Container(
                      padding: const EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      constraints: const BoxConstraints(
                        minWidth: 16,
                        minHeight: 16,
                      ),
                      child: Text(
                        _activeProcurementsCount.toString(),
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
              ],
            ),
            label: '–ö–∞—Ç–∞–ª–æ–≥',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.analytics),
            label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
          ),
        ],
      ),
      floatingActionButton: null, // FAB —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω –≤ Stack
    );
  }
}

// –í—ã–Ω–µ—Å —Å–µ—Ç–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
class _InvoicesTab extends StatelessWidget {
  final AppUser? user;
  const _InvoicesTab({Key? key, required this.user}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isAdmin = user?.role == 'admin' || user?.role == 'superadmin';
    final List<_InvoiceSection> sections = [
      if (isAdmin) ...[
        _InvoiceSection(
          icon: Icons.inbox,
          label: '–í—Ö–æ–¥—è—â–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ',
          route: '/admin_incoming_invoices',
        ),
        _InvoiceSection(
          icon: Icons.build,
          label: '–ù–∞ —Å–±–æ—Ä–∫–µ',
          route: '/admin_packing_invoices',
        ),
        _InvoiceSection(
          icon: Icons.local_shipping,
          label: '–ü–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É',
          route: '/admin_delivery_invoices',
        ),
        _InvoiceSection(
          icon: Icons.done_all,
          label: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
          route: '/admin_delivered_invoices',
        ),
        _InvoiceSection(
          icon: Icons.verified,
          label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç',
          route: '/admin_payment_check_invoices',
        ),
        _InvoiceSection(
          icon: Icons.archive,
          label: '–ê—Ä—Ö–∏–≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö',
          route: '/invoice_list',
        ),
      ]
    ];

    return ListView.separated(
      padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),
      itemCount: sections.length,
      separatorBuilder: (_, __) => const SizedBox(height: 12),
      itemBuilder: (context, i) {
        final section = sections[i];
        return Card(
          elevation: 2,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: ListTile(
            leading: Icon(section.icon, size: 32, color: Colors.deepPurple),
            title: Text(section.label, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500)),
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              Navigator.pushNamed(context, section.route);
            },
          ),
        );
      },
    );
  }
}

class _InvoiceSection {
  final IconData icon;
  final String label;
  final String route;
  const _InvoiceSection({required this.icon, required this.label, required this.route});
} 