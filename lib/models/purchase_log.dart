import 'package:cloud_firestore/cloud_firestore.dart';

enum PurchaseAction {
  created,              // –ó–∞–∫—É–ø —Å–æ–∑–¥–∞–Ω
  received,             // –¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã
  shortageRecorded,     // –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—á–∞
  stocked,              // –¢–æ–≤–∞—Ä—ã –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω—ã
  onSale,               // –¢–æ–≤–∞—Ä—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  shortageReceived,     // –ù–µ–¥–æ—Å—Ç–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞
  shortageNotReceived,  // –ù–µ–¥–æ—Å—Ç–∞—á–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
  archived,             // –ó–∞–∫—É–ø –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
}

class PurchaseLog {
  final String id;
  final String purchaseId;
  final PurchaseAction action;
  final Timestamp date;
  final String userId;
  final String userName;
  final String? details;      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
  final Map<String, dynamic>? metadata; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

  const PurchaseLog({
    required this.id,
    required this.purchaseId,
    required this.action,
    required this.date,
    required this.userId,
    required this.userName,
    this.details,
    this.metadata,
  });

  factory PurchaseLog.create({
    required String purchaseId,
    required PurchaseAction action,
    required String userId,
    required String userName,
    String? details,
    Map<String, dynamic>? metadata,
  }) {
    return PurchaseLog(
      id: 'log_${DateTime.now().millisecondsSinceEpoch}',
      purchaseId: purchaseId,
      action: action,
      date: Timestamp.now(),
      userId: userId,
      userName: userName,
      details: details,
      metadata: metadata,
    );
  }

  PurchaseLog copyWith({
    String? id,
    String? purchaseId,
    PurchaseAction? action,
    Timestamp? date,
    String? userId,
    String? userName,
    String? details,
    Map<String, dynamic>? metadata,
  }) {
    return PurchaseLog(
      id: id ?? this.id,
      purchaseId: purchaseId ?? this.purchaseId,
      action: action ?? this.action,
      date: date ?? this.date,
      userId: userId ?? this.userId,
      userName: userName ?? this.userName,
      details: details ?? this.details,
      metadata: metadata ?? this.metadata,
    );
  }

  Map<String, dynamic> toMap() => {
    'id': id,
    'purchaseId': purchaseId,
    'action': action.index,
    'date': date,
    'userId': userId,
    'userName': userName,
    'details': details,
    'metadata': metadata,
  };

  factory PurchaseLog.fromMap(Map<String, dynamic> map) => PurchaseLog(
    id: map['id'] ?? '',
    purchaseId: map['purchaseId'] ?? '',
    action: PurchaseAction.values[map['action'] ?? 0],
    date: map['date'] ?? Timestamp.now(),
    userId: map['userId'] ?? '',
    userName: map['userName'] ?? '',
    details: map['details'],
    metadata: map['metadata'] != null ? Map<String, dynamic>.from(map['metadata']) : null,
  );

  // –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  String get actionDisplayName {
    switch (action) {
      case PurchaseAction.created:
        return '–ó–∞–∫—É–ø —Å–æ–∑–¥–∞–Ω';
      case PurchaseAction.received:
        return '–¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã';
      case PurchaseAction.shortageRecorded:
        return '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—á–∞';
      case PurchaseAction.stocked:
        return '–¢–æ–≤–∞—Ä—ã –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω—ã';
      case PurchaseAction.onSale:
        return '–¢–æ–≤–∞—Ä—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É';
      case PurchaseAction.shortageReceived:
        return '–ù–µ–¥–æ—Å—Ç–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞';
      case PurchaseAction.shortageNotReceived:
        return '–ù–µ–¥–æ—Å—Ç–∞—á–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞';
      case PurchaseAction.archived:
        return '–ó–∞–∫—É–ø –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω';
    }
  }

  // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
  String get actionIcon {
    switch (action) {
      case PurchaseAction.created:
        return 'üìù';
      case PurchaseAction.received:
        return 'üì¶';
      case PurchaseAction.shortageRecorded:
        return '‚ö†Ô∏è';
      case PurchaseAction.stocked:
        return 'üè™';
      case PurchaseAction.onSale:
        return 'üõí';
      case PurchaseAction.shortageReceived:
        return '‚úÖ';
      case PurchaseAction.shortageNotReceived:
        return '‚ùå';
      case PurchaseAction.archived:
        return 'üìÅ';
    }
  }

  // –¶–≤–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
  int get actionColor {
    switch (action) {
      case PurchaseAction.created:
        return 0xFF2196F3; // –°–∏–Ω–∏–π
      case PurchaseAction.received:
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
      case PurchaseAction.shortageRecorded:
        return 0xFFFF9800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      case PurchaseAction.stocked:
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
      case PurchaseAction.onSale:
        return 0xFF9C27B0; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      case PurchaseAction.shortageReceived:
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
      case PurchaseAction.shortageNotReceived:
        return 0xFFF44336; // –ö—Ä–∞—Å–Ω—ã–π
      case PurchaseAction.archived:
        return 0xFF9E9E9E; // –°–µ—Ä—ã–π
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
  String get formattedDate {
    final dateTime = date.toDate();
    return '${dateTime.day.toString().padLeft(2, '0')}.${dateTime.month.toString().padLeft(2, '0')}.${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }
}
